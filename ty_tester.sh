#!/usr/bin/env bash
#### Description: UCSD CSE100 Spring 2016 PA2 Self-Tester for Students.
#### Usage: See README.md.

set -o nounset

# Text
TXT_RESET="$(tput sgr 0 2> /dev/null)"
TXT_RED="$(tput setaf 1 2> /dev/null)"
TXT_GREEN="$(tput setaf 2 2> /dev/null)"
TXT_YELLOW="$(tput setaf 3 2> /dev/null)"
TXT_CYAN="$(tput setaf 6 2> /dev/null)"

# Variables
INPUT_DIR="pa2_input_files"
REF_CMP="ty_test_ref_cmp.tmp"
YOUR_CMP="ty_test_your_cmp.tmp"
REF_UNCMP="ty_test_ref_uncmp.tmp"
YOUR_UNCMP="ty_test_your_uncmp.tmp"
RAND_TXT="ty_large_random_input.txt"
RAND_BIN="ty_large_random_input.bin"

TMP_DIR="$(mktemp -d)"
[[ $(hostname -s) = ieng6* ]]; ON_IENG6=$?

generate_random_input_files() {
  local input_file_size="$1"
  if [[ -z ${input_file_size} ]]; then
    echo "generate_random_input_files: No size was specified. Exiting. ";
    exit 1
  fi
  echo -ne "Generating random input text & binary files of size ${input_file_size}... "
  # LC_ALL so that BSD tr does not complain about UTF-8
  # LC_ALL=C tr -dc "[\x00-\xFF]" < /dev/urandom | head -c ${input_file_size} > "${INPUT_DIR}/${RAND_TXT}"
  # head -c ${input_file_size} < /dev/urandom > "${INPUT_DIR}/${RAND_BIN}"
  openssl rand -out "${INPUT_DIR}/${RAND_TXT}" -base64 $(( ${input_file_size} * 3/4 ))
  openssl rand -out "${INPUT_DIR}/${RAND_BIN}" ${input_file_size}
  echo -e "[${TXT_GREEN}DONE${TXT_RESET}]"
}

compression_ratio_test() {
  # local ref_cmp_filesize=$(du -b "${TMP_DIR}/${REF_CMP}" | cut -f 1)
  # local your_cmp_filesize=$(du -b "${TMP_DIR}/${YOUR_CMP}" | cut -f 1)
  if stat --version &>/dev/null; then
    # GNU stat
    local ref_cmp_filesize="$(stat -c%s "${TMP_DIR}/${REF_CMP}")"
    local your_cmp_filesize="$(stat -c%s "${TMP_DIR}/${YOUR_CMP}")"
  else
    # BSD stat
    local ref_cmp_filesize="$(stat -f%z "${TMP_DIR}/${REF_CMP}")"
    local your_cmp_filesize="$(stat -f%z "${TMP_DIR}/${YOUR_CMP}")"
  fi
  if [[ ${ref_cmp_filesize} -gt ${your_cmp_filesize} ]]; then
    echo -e "[${TXT_GREEN}PASSED${TXT_RESET}]"
  else
    echo -e "[${TXT_YELLOW}ACCURATE${TXT_RESET}]"
    echo -e "${TXT_YELLOW}Reference compressed size: ${ref_cmp_filesize}. Your compressed size is ${your_cmp_filesize}. ${TXT_RESET}"
  fi
}

is_on_ieng6() {
  return ${ON_IENG6}
}

cleanup () {
  rm "${INPUT_DIR}/${RAND_TXT}" "${INPUT_DIR}/${RAND_BIN}"
  rm -rf "${TMP_DIR}"
  # ehco -e "${TMP_DIR}"
  echo "Temporary files generated by the tests deleted. "
  echo -e "${TXT_YELLOW}NOTE: THIS SCRIPT IS PROVIDED FOR YOUR REFERENCE ONLY. IT DOES NOT COME WITH ANY GUARANTEE. ${TXT_RESET}"
}
trap cleanup EXIT

if ! make; then
    echo -e "${TXT_RED}Failed to compile using make. ${TXT_RESET} No test was run. "
    exit 1
fi
echo -e "${TXT_GREEN}Compiled successfully using make. ${TXT_RESET}"

if is_on_ieng6; then
  echo -e "${TXT_CYAN}NOTE: On ieng6, the random files generated are of smaller size for performance reason. ${TXT_RESET}"
  generate_random_input_files 5242880 # since ieng6 is slow
else
  generate_random_input_files 10485760
  echo -e "${TXT_CYAN}NOTE: Size tests against reference version will not be run since you are not on ieng6. ${TXT_RESET}"
fi

for input_file in "${INPUT_DIR}"/*; do
  echo -ne "Testing \"${input_file}\"... \t "
  ./compress "${input_file}" "${TMP_DIR}/${YOUR_CMP}" &> /dev/null
  ./uncompress "${TMP_DIR}/${YOUR_CMP}" "${TMP_DIR}/${YOUR_UNCMP}" &> /dev/null
  if is_on_ieng6; then
    ./refcompress "${input_file}" "${TMP_DIR}/${REF_CMP}" &> /dev/null
    # ./refuncompress "${TMP_DIR}/${REF_CMP}" "${TMP_DIR}/${REF_UNCMP}" &> /dev/null
  fi
  if cmp -s "${input_file}" "${TMP_DIR}/${YOUR_UNCMP}"; then
    if is_on_ieng6; then
      size_test
    else
      echo -e "[${TXT_YELLOW}ACCURATE${TXT_RESET}]"
    fi
  else
    echo -e "[${TXT_RED}FAILED${TXT_RESET}]"
    echo -e "${TXT_RED}Not all tests were run. ${TXT_RESET}"
    exit 1
  fi
done

echo "All tests finished. "
exit 0
